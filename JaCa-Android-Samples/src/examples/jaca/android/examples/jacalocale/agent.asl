//Belief used to memorise if the user is currently busy or not (due to calendar appointments).
busy(_).
//Beliefs indicating the places where the user does not wat to be disturbed
relevant_place(111,222). 
relevant_place(222,333).
//List of contacts the user wants to receive call independtly from the value of the belief busy
relevant_contacts(["1234","123","+39"]).
//Phone settings to be used when busy is true 
phoneSettingsWhenBusy("vibrate").
//Phone settings to be used when busy is false
phoneSettingsWhenAvailable("normal").

//Agent initial goal
!init.


/* ------------------------ Artifact initialisations -------------------------------- */
+!init
	<-  println("init");
		makeArtifact("smsreceiver", "jaca.android.tools.SMSManager", [true], SmsID);
		focus(SmsID);
		+art_id(sms,SmsID);
		//focus("MailManager"); We don't have this yet
		makeArtifact("call-manager", "jaca.android.tools.CallManager", [], CallID);
		focus(CallID); 
		+art_id(call,CallID);
		makeArtifact("contacts-manager", "jaca.android.tools.ContactsManager", [], ContactsID);
		focus(ContactsID);
		+art_id(contacts,ContactsID);

		/*
		 * The Calendar is not available in the emulator. Remove the following comment when
		 * testing/deploying in a real device
		 */ 
		 
		 /*makeArtifact("calendar-manager", "jaca.android.tools.CalendarManager", [], CalendarID);
		 focus(CalendarID); 
		 +art_id(calendar,CalendarID);*/
		 
		makeArtifact("battery-artifact", "jaca.android.tools.BatteryArtifact", [], BattID);
		focus(BattID);
		+art_id(battery,BattID);
		makeArtifact("phonesettings-manager", "jaca.android.tools.PhoneSettingsManager", [], PhoneID);
		focus(PhoneID);
		+art_id(phone,PhoneID);
		makeArtifact("connectivity-manager", "jaca.android.tools.ConnectivityManager", [], ConnID);
		focus(ConnID);
		+art_id(connection,ConnID);
		makeArtifact("gps-manager", "jaca.android.tools.GPSManager", [], GPSID);
		focus(GPSID);
		+art_id(gps,GPSID);
		println("Init done").


/* -------- Plans for managing the events generated by the CalendarManager -------- */

//Signal generated by the CalendarManager artifact each time a new event starts
+event_started(CalendarID, Description)
	: phoneSettingsWhenBusy(Setting) 
	<-  ?art_id(phone,PhoneID); //For retrieving artifact ID
	    setRingerMode(Setting)[artifact_id(PhoneID)];
	    -+busy(yes, Description);
	    println("New event start: I'm now busy.").

//Signal generated by the CalendarManager artifact each time an event end
+event_ended(ID, Description) : true
	<-  ?art_id(phone,PhoneID); ?art_id(calendar,CalendarID); //For retrieving artifact IDs
		//Check for other ongoing apps
		getOngoingEvents(Events)[artifact_id(CalendarID)];
		/*
		 *	If Events is not ground, that means there are no more ongoing appointments.
		 *  We can restore the phone settings phoneSettingsWhenAvailable(Setting) 
		*/
		if(not .ground(Events)){
			?phoneSettingsWhenAvailable(Setting); 
			setRingerMode(Setting)[artifact_id(PhoneID)];
			-+busy(no,_);
			println("Event ended and no more events: I'm no more busy");
		}
		else{
			println("Event ended but others evets present: I'm still busy");
		}.
		


/* -------- Plans for managing the incoming phone calls, events generated by the CallManager -------- */
		
//Plan for dropping phone call when the user is busy and the call does not come from a relevant contact
+ringing(Source) 
	: busy(BusyVal, Reason) & BusyVal == yes 
	  & relevant_contacts(List) & (not .member(Source, List))
	<-  ?art_id(call,CallID);
		println("Incoming call from a not relevant contact in busy state. I'm going to drop the call and send a notification.");
		dropCall[artifact_id(CallID)];
		.concat("Sorry, I'm busy due to", Reason, "I will call you back as soon as possible.", OutStr);
		!handle_auto_reply(OutStr).

//Plan for testing the drop call in the emulator, no use of the calendar, check performed only using the contacts
/*+ringing(Source) 
	: relevant_contacts(List) & (not .member(Source, List))
	<-  ?art_id(call,CallID);
		println("Incoming call from a not relevant contact in busy state. I'm going to drop the call and send a notification.");
		dropCall[artifact_id(CallID)];
		.concat("Sorry, I'm busy due to", Reason, "I will call you back as soon as possible.", OutStr);
		!handle_auto_reply(Source, OutStr).*/

//Plan applied if the previous one does not match (i.e. the call can be handled normally)
+ringing(Source) : true 
	<-  println("No need to drop the call, normal call handling by the Android appp").
	  

/* -------- Plans for managing the incoming phone calls, events generated by the CallManager -------- */

//We do not have a fully working mailmanager yet
/*+!handle_auto_reply(Source, Reason) : wifi_status("on")
<- send_mail("Auto-reply", Reason)*/

+!handle_auto_reply(Source, Reason): wifi_status("off")
<- 	println("User busy, managing auto-reply");
	?art_id(sms,SmsID);
	send(Source, Reason)[artifact_id(SmsID)];
	println("Auto-reply message sent").


/* -------- Plans for saving the device battery, events generated by the BatteryManager -------- */

+battery_status("low") : airplane_status("off")
<- enableAirplaneMode.

+battery_status("ok") : airplane_status("on")
<- disableAirplaneMode.

/* --- Plans for managing the geo-localisation of the device, events generated by the GPSManager --- */

+longitude(Longitude) <- println("Current longitude ", Longitude).
+latitude(Latitude) <- println("Current latitude ", Latitude).